/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DarkPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_INDEX"
      | "QUOTE_INDEX"
      | "balances"
      | "createOrder"
      | "deleteOrder"
      | "deposit"
      | "eip712Domain"
      | "fillOrder"
      | "getBalance"
      | "orders"
      | "retractOrder"
      | "tokens"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "OrderCreated"
      | "OrderDeleted"
      | "OrderUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUOTE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retractOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_INDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "QUOTE_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retractOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    orderType: BigNumberish,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    orderType: bigint,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    user: string;
    orderType: bigint;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderDeletedEvent {
  export type InputTuple = [user: AddressLike, orderType: BigNumberish];
  export type OutputTuple = [user: string, orderType: bigint];
  export interface OutputObject {
    user: string;
    orderType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    orderType: BigNumberish,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    orderType: bigint,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    user: string;
    orderType: bigint;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DarkPool extends BaseContract {
  connect(runner?: ContractRunner | null): DarkPool;
  waitForDeployment(): Promise<this>;

  interface: DarkPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_INDEX: TypedContractMethod<[], [bigint], "view">;

  QUOTE_INDEX: TypedContractMethod<[], [bigint], "view">;

  balances: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createOrder: TypedContractMethod<
    [
      orderType: BigNumberish,
      amountCypherText: BytesLike,
      priceCypherText: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  deleteOrder: TypedContractMethod<
    [user: AddressLike, orderType: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  fillOrder: TypedContractMethod<
    [buyer: AddressLike, seller: AddressLike],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<
    [tokenId: BigNumberish, publicKey: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  orders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { amount: bigint; price: bigint }],
    "view"
  >;

  retractOrder: TypedContractMethod<
    [orderType: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  withdraw: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUOTE_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [
      orderType: BigNumberish,
      amountCypherText: BytesLike,
      priceCypherText: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteOrder"
  ): TypedContractMethod<
    [user: AddressLike, orderType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [buyer: AddressLike, seller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, publicKey: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { amount: bigint; price: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "retractOrder"
  ): TypedContractMethod<[orderType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderDeleted"
  ): TypedContractEvent<
    OrderDeletedEvent.InputTuple,
    OrderDeletedEvent.OutputTuple,
    OrderDeletedEvent.OutputObject
  >;
  getEvent(
    key: "OrderUpdated"
  ): TypedContractEvent<
    OrderUpdatedEvent.InputTuple,
    OrderUpdatedEvent.OutputTuple,
    OrderUpdatedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OrderCreated(address,uint8,uint256,uint256)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "OrderDeleted(address,uint8)": TypedContractEvent<
      OrderDeletedEvent.InputTuple,
      OrderDeletedEvent.OutputTuple,
      OrderDeletedEvent.OutputObject
    >;
    OrderDeleted: TypedContractEvent<
      OrderDeletedEvent.InputTuple,
      OrderDeletedEvent.OutputTuple,
      OrderDeletedEvent.OutputObject
    >;

    "OrderUpdated(address,uint8,uint256,uint256)": TypedContractEvent<
      OrderUpdatedEvent.InputTuple,
      OrderUpdatedEvent.OutputTuple,
      OrderUpdatedEvent.OutputObject
    >;
    OrderUpdated: TypedContractEvent<
      OrderUpdatedEvent.InputTuple,
      OrderUpdatedEvent.OutputTuple,
      OrderUpdatedEvent.OutputObject
    >;
  };
}
