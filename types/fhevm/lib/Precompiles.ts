/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PrecompilesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Add"
      | "BitwiseAnd"
      | "BitwiseOr"
      | "BitwiseXor"
      | "Cast"
      | "Equal"
      | "FhePubKey"
      | "GreaterThan"
      | "GreaterThanOrEqual"
      | "LessThan"
      | "LessThanOrEqual"
      | "Max"
      | "Min"
      | "Multiply"
      | "Negate"
      | "Not"
      | "NotEqual"
      | "OptimisticRequire"
      | "Reencrypt"
      | "Require"
      | "ShiftLeft"
      | "ShiftRight"
      | "Subtract"
      | "TrivialEncrypt"
      | "Verify"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Add", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BitwiseAnd",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BitwiseOr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BitwiseXor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Cast", values?: undefined): string;
  encodeFunctionData(functionFragment: "Equal", values?: undefined): string;
  encodeFunctionData(functionFragment: "FhePubKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GreaterThan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GreaterThanOrEqual",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LessThan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LessThanOrEqual",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Max", values?: undefined): string;
  encodeFunctionData(functionFragment: "Min", values?: undefined): string;
  encodeFunctionData(functionFragment: "Multiply", values?: undefined): string;
  encodeFunctionData(functionFragment: "Negate", values?: undefined): string;
  encodeFunctionData(functionFragment: "Not", values?: undefined): string;
  encodeFunctionData(functionFragment: "NotEqual", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OptimisticRequire",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Reencrypt", values?: undefined): string;
  encodeFunctionData(functionFragment: "Require", values?: undefined): string;
  encodeFunctionData(functionFragment: "ShiftLeft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ShiftRight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Subtract", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TrivialEncrypt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Verify", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BitwiseAnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BitwiseOr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BitwiseXor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Equal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FhePubKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GreaterThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GreaterThanOrEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LessThan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LessThanOrEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Min", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Multiply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Negate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Not", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NotEqual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OptimisticRequire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Reencrypt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Require", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ShiftLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ShiftRight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Subtract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TrivialEncrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Verify", data: BytesLike): Result;
}

export interface Precompiles extends BaseContract {
  connect(runner?: ContractRunner | null): Precompiles;
  waitForDeployment(): Promise<this>;

  interface: PrecompilesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Add: TypedContractMethod<[], [bigint], "view">;

  BitwiseAnd: TypedContractMethod<[], [bigint], "view">;

  BitwiseOr: TypedContractMethod<[], [bigint], "view">;

  BitwiseXor: TypedContractMethod<[], [bigint], "view">;

  Cast: TypedContractMethod<[], [bigint], "view">;

  Equal: TypedContractMethod<[], [bigint], "view">;

  FhePubKey: TypedContractMethod<[], [bigint], "view">;

  GreaterThan: TypedContractMethod<[], [bigint], "view">;

  GreaterThanOrEqual: TypedContractMethod<[], [bigint], "view">;

  LessThan: TypedContractMethod<[], [bigint], "view">;

  LessThanOrEqual: TypedContractMethod<[], [bigint], "view">;

  Max: TypedContractMethod<[], [bigint], "view">;

  Min: TypedContractMethod<[], [bigint], "view">;

  Multiply: TypedContractMethod<[], [bigint], "view">;

  Negate: TypedContractMethod<[], [bigint], "view">;

  Not: TypedContractMethod<[], [bigint], "view">;

  NotEqual: TypedContractMethod<[], [bigint], "view">;

  OptimisticRequire: TypedContractMethod<[], [bigint], "view">;

  Reencrypt: TypedContractMethod<[], [bigint], "view">;

  Require: TypedContractMethod<[], [bigint], "view">;

  ShiftLeft: TypedContractMethod<[], [bigint], "view">;

  ShiftRight: TypedContractMethod<[], [bigint], "view">;

  Subtract: TypedContractMethod<[], [bigint], "view">;

  TrivialEncrypt: TypedContractMethod<[], [bigint], "view">;

  Verify: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Add"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BitwiseAnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BitwiseOr"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BitwiseXor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Cast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Equal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FhePubKey"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GreaterThan"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GreaterThanOrEqual"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LessThan"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LessThanOrEqual"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Max"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Min"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Multiply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Negate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Not"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NotEqual"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OptimisticRequire"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Reencrypt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Require"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ShiftLeft"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ShiftRight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Subtract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TrivialEncrypt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Verify"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
